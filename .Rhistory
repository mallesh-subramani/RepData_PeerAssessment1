stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
date(req)
system.time(req)
datedownloaded <- date
datedownloaded <- date()
datedownloaded
names(req)
req$date
head(req)
req[[1]]
req[[1]][[1]]
req[[26]]
req[[2]]
req[[3]]
library(jsonlite)
reqj <- fromJSON(require(package))
reqj <- fromJSON(req)
req$handle
req$content
req <- fromJSON("https://api.github.com/rate_limit", gtoken)
names(req)
req <- fromJSON("https://api.github.com/rate_limit")
req <- fromJSON("https://api.github.com/users/jtleek/repos",gtoken)
names(req)
req
req <- fromJSON("https://api.github.com/users/jtleek/repos")
names(req)
req$created_at
req$created_at==2012-06-20T18:39:06Z
req$created_at=="2012-06-20T18:39:06Z"
names(req$created_at)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
js <- toJSON(req,pretty = TRUE)
req
cat(js)
js
req
names(req)
req$date
names(req$date)
req$times
req$url
req$status_code
req$all_headers
names(req$all_headers)
req$content
req$request
js <- fromJSON(req)
data.class(req)
req
req[[2]]
req[[3]]
req[[4]]
req[[5]]
req[[6]]
req[[7]]
req[[8]]
req[[9]]
req[10]
req[[10]]
req[[11]]
req <- GET("https://api.github.com/users/jtleek/repos/created-date", gtoken)
req
req <- GET("https://api.github.com/users/jtleek/repos/date-created", gtoken)
req
oauth_endpoints("github")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
names(req)
names(req$cookies)
names(req$headers)
names(req$headers$date)
req$headers$date
names(req)
names(req$times)
names(req$date)
min(req$date)
min(as.numeric(req$date))
min(as.character(req$date))
min(as.character.Date(req$date))
req$date
req$request$fields
names(req)
req$handle
req$all_headers
req <- fromJSON("https://api.github.com/users/jtleek/repos")
req[[0]]
req[[1]][[1]]
names(req)
req$created_at
sort(req$created_at)
req <- fromJSON("https://api.github.com/users/jtleek/repos/datasharing")
req <- fromJSON("https://api.github.com/users/jtleek/repos/data-sharing")
req <- GET("https://api.github.com/jtleek/datasharing", gtoken)
names(req)
req$date
req <- fromJSON("https://api.github.com/users/jtleek/repos/data-sharing")
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
names(req)
req$url
req$headers
req$headers$server
req$headers$`content-type`
req$headers$status
req$headers$link
req$headers$date
req$content
req
req[[1]]
req[[2]]
req[[3]]
req[[4]]
req[[5]]
req$content
req$content[[1]]
req$cookies$name
req$request$url
req$all_headers
req$headers$link
req$headers$link[req$headers$link=="https://api.github.com/user/1571674/repos?page=2"]
req$content
req$handle
req
req["name"=="data=sharing"]
req["name"="data=sharing"]
read_json(req)
read_json(req,"name"="data-sharing")
?read_json
read_json(req,tmp)
path.expand(req)
read_json(req,.Rdata)
read_json(req,~/.Rdata)
read_json(req,"~/.Rdata")
readClipboard()
req <- fromJSON("https://api.github.com/users/jtleek/repos")
req
req$name
req$name=="datasharing"
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- fromJSON("https://api.github.com/users/jtleek/repos",gtoken)
stop_for_status(req)
content(req)
req
req$
req$
q
req
req$created_date
req$name
req[[1]]
req[[1]2]
req[[2]]
req$created_at[req$name=="datasharing"]
req[[2]]$name
req[[req=="datasharing"]]
req[["names=="datasharing"]]
req[["names"=="datasharing"]]
req[[names]]
req[[3]]
req[[4]]$name
req[[5]]$name
req[[6]]$name
req[[7]]$name
req[[8]]$name
req[[9]]$name
req[[10:26]]$name
req[[10:15]]$name
req[[10]]$name
req[[11]]$name
req[[12]]$name
req[[12]]$name
req[[13]]$name
req[[14]]$name
req[[15]]$name
req[[15]]$created_at
library(RMySQL)
names(req)
asJSON
toJSON(req)
a <- toJSON(req)
head(a)
a[[1]]
a[[1]][[15]]
a <- fromJSON(req)
req <- get("https://api.github.com/users/jtleek/repos",gtoken)
req <- GET("https://api.github.com/users/jtleek/repos",gtoken)
req
req[{"name"=="datasharing"}]
req[{"name"}]
req[req[{"name"=="datasharing"}]]
req[req["name"=="datasharing"]]
req[req("name"=="datasharing")]
req[req{"name"=="datasharing"}]
req[req[{"name"=="datasharing"}]]
data.class(req)
req[response]
req["response"]
req[]
req$request
req$request(GET  https://api.github.com/users/jtleek/repos/datasharing)
req$request(GET  )https://api.github.com/users/jtleek/repos/datasharing))
req$request(GET  (https://api.github.com/users/jtleek/repos/datasharing))
req$request(GET  ("https://api.github.com/users/jtleek/repos/datasharing"))
req <- GET("https://api.github.com/users/jtleek/repos/datasharing",gtoken)
req$date
req$status_code
req <- GET("https://api.github.com/users/jtleek/repos/data-sharing",gtoken)
req <- GET("https://api.github.com/jtleek/repos/data-sharing",gtoken)
req$status_code
req <- GET("https://api.github.com/jtleek/data-sharing",gtoken)
req$status_code
req <- GET("https://api.github.com/users/jtleek/repos",gtoken)
req
toJSON(req)
fromJSON(req)
req$all_headers
req
req[{"id"}]
req[{}]
req["id":101394164]
req["id":"101394164"]
req[{"id":"101394164"}]
req{"id":"101394164"}
req("id":"101394164")
oauth_endpoints("github")
View(myapp)
View(myapp)
myapp <- oauth_app("github",
key = "9982a62c212c174c4dec",
secret = "f3610225050c30bf61ecd5ef791ff9f00b5fb415")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req[[14]]
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
req
req[[14]]
req[[1]]
req[[2]]
req[[6]]
req[[6]][[14]]
req[[5]]
req[[5\4]]
req[[4]]
req[[4]][[16]]
req[[4]][[2]]
req[[4]][[1]]
req <- GET("https://api.github.com/rate_limit", gtoken)
req
req <- read_json("https://api.github.com/users/jtleek/repos", gtoken)
req
req[[14]]
req[[15]]
req[[15]]$created_at
library(xml)
library(XML)
a <- htmlTreeParse("http://biostat.jhsph.edu/~jleek/contact.html")
a
names(a)
a[[1]]
a[[1]][[1]]
a[[1]][[2]]
a[[2]]
a[1]
a[2]
a[3]
a[3][10]
a[3][11]
?nchar
a[[1]]
b <- xpathSApply(a,nchar)
b <- xpathSApply(a,nchar(xmlValue()))
b <- xpathSApply(a,nchar(xmlValue)
)
names(a)
nchar(a)
a$file
a$version
a$children$html$head
nchar(a$children$html$head)
nchar(a$children$html)
nchar(a$children)
a$children
a
a <- htmlParse("http://biostat.jhsph.edu/~jleek/contact.html")
a
a[1]
a[[1]]
a(1)
a[1]
?htmlParse
a <- htmlParse("http://biostat.jhsph.edu/~jleek/contact.html")
xmlSApply(a,xmlValue)
xmlSApply(a,nchar(a))
xmlSApply(a
)
a[1]
a
names(a)
data.class(a)
a <- htmlTreeParse("http://biostat.jhsph.edu/~jleek/contact.html")
a$children[[1]]
names(a$children)
names(a$version)
names(a$file)
names(a$children$html)
a$children$html$head
a$children$html$body
a$children$html
a$children$html[[1]]
xpathSApply(a$children,"//html",nchar)
xpathSApply(a$children$html,nchar)
xpathSApply(a$children$html,xmlValue)
?xpathSApply
a$children
a <- htmlParse("http://biostat.jhsph.edu/~jleek/contact.html")
a
nchar(a[<>])
nchar(a[])
nchar(a)
nchar(a[,*])
nchar(a[,])
nchar(a[,20])
nchar(a[20,])
a[20]
a[[20]]
names(a)
root <- xmlRoot(a)
root
xmlName(root)
names(root)
xmlSApply(root,nchar)
xmlSApply(root,nchar(root))
xmlSApply(root,"/html",nchar(root))
xmlSApply(root,"//html",nchar(root))
root[[1]]
nchar(root)
nchar(root[[1]])
as.character(root)
root[[1]][[1]]
root[[1]][[2]]
nchar(root[[1]][[2]])
nchar(as.character(root[[1]][[2]]))
nchar(as.character(root[[1]][[20]]))
root[[1]][[20]]
root[[1]][[15]]
root[[1]][[16]]
root
xmlSApply(root,xmlValue)
nchar(xmlSApply(root,xmlValue))
root$head[[1]]
root$head
a<- xmlTreeParse("http://biostat.jhsph.edu/~jleek/contact.html",useInternal=TRUE)
a<- xmlTreeParse("http://biostat.jhsph.edu/~jleek/contact.html")
a<- xmlTreeParse("http://biostat.jhsph.edu/~jleek/contact.html")
a
library(XML)
a<- xmlTreeParse("http://biostat.jhsph.edu/~jleek/contact.html")
update.packages()
update()
update(.)
update.packages()
library(swirl)
swirl()
library(swirl)
swirl()
swirl()
cmat
jk
dgdf
skip
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
skip
mdist(x,y,cx,cy)
kli
ski[]
skip
apply(distTmp,2,which.min)
?cex
skip
points(x,y,pch=19,cex=2,col=cols1[newClust])
skip
tapply(x,newClust,mean)
skip
tapply(y,newClust,mean)
skip
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
skip
mdist(x,y,newCx,newCy)
library(swirl)
swirl()
cmat
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mydist
swirl()
library(swirl)
swirl()
matu%*%diag%*%t(matv)
act_sum <- tapply(activity$steps,activity$date,sum)
setwd("~/github/RepData_PeerAssessment1")
#setwd("~/git/RepData_PeerAssessment1")
library(lubridate)
activity <- read.csv("activity.csv")
activity$date <- ymd(activity$date)
activity <- activity[!is.na(activity$steps), ]
act_sum <- tapply(activity$steps,activity$date,sum)
hist(act_sum
,col = "black"
,breaks = 20
,xlab = "steps"
,ylab = "freq"
,main = "histogram of number of steps")
median(activity$interval)     #finding the median
mean(activity$interval)       #finding the mean
steps <- tapply(activity$steps,activity$interval,mean)
steps1 <- data.frame(step=steps,interval=as.numeric(names(steps)))
rownames(steps1) <- (1:length(steps1$step))
plot(steps1$step~steps1$interval
,type="l"
,col="red"
,xlab="interval"
,ylab="steps")
steps <- tapply(activity$steps,activity$interval,mean)
steps1 <- data.frame(step=steps,interval=as.numeric(names(steps)))
rownames(steps1) <- (1:length(steps1$step))
plot(steps1$step~steps1$interval
,type="l"
,col="red"
,xlab="interval"
,ylab="steps")
missing <- read.csv("activity.csv")
missing$date <- ymd(missing$date)
sum(is.na(missing$steps))     #Total missing values in the data set
setwd("~/github/RepData_PeerAssessment1")
#setwd("~/git/RepData_PeerAssessment1")
library(lubridate)
activity <- read.csv("activity.csv")
activity$date <- ymd(activity$date)
activity <- activity[!is.na(activity$steps), ]
missing <- read.csv("activity.csv")
missing$date <- ymd(missing$date)
setwd("~/github/RepData_PeerAssessment1")
missing <- read.csv("activity.csv")
missing$date <- ymd(missing$date)
missing$interval[1]
missing$interval[2]
missing$interval[3]
aggregate(missing$steps,missing$interval==5,mean())
aggregate(missing$steps,missing$interval==5,mean)
aggregate(missing$steps,list(missing$interval==5),mean)
aggregate(missing$steps,missing$interval[3],mean)
aggregate(missing$steps,list(missing$interval[3]),mean)
missing$steps[missing$interval[1]]
missing$steps[missing$interval==5]
missing$steps[missing$interval==missing$interval[10]]
missing$interval
mean(missing$steps[missing$interval==missing$interval[10]],na.rm = TRUE)
for (i in 1:length(missing$steps)) {
if(is.na(missing$steps[i]))
{
missing$steps[i] <- mean(missing$steps[missing$interval==missing$interval[i]],na.rm = TRUE)
}
}
is.na(missing$steps)
sum(is.na(missing$steps))
missing <- read.csv("activity.csv")
sum(is.na(missing))
sum(is.na(missing$steps))
act_sum <- tapply(activity$steps,activity$date,sum)
act_sum
missing$steps
for (i in 1:length(missing$steps)) {
if(is.na(missing$steps[i]))
{
missing$steps[i] <- mean(missing$steps[missing$interval==missing$interval[i]],na.rm = TRUE)
}
}
missing$steps
mean(missing$steps)
median(missing$steps)
library(lubridate)
activity <- read.csv("activity.csv")
activity$date <- ymd(activity$date)
activity <- activity[!is.na(activity$steps), ]
mean(activity$steps)
dim(activity)
dim(missing)
sum(activity$steps)/15264
sum(missing$steps)/17568
class(missing$steps)
missing <- read.csv("activity.csv")
for (i in 1:length(missing$steps)) {
if(is.na(missing$steps[i]))
{
missing$steps[i] <- mean(missing$steps[missing$interval==missing$interval[i]],na.rm = TRUE)
}
}
missing_sum <- tapply(missing$steps,missing$date,sum)
missing$steps
mean(missing$steps)
mean(missing_sum)
missing <- read.csv("activity.csv")
missing$steps <- impute(missing$steps,fun=mean())
install.packages("impute")
??impute
